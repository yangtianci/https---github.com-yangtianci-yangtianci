

/**

- 框架思路

框架 == 通用结构 + 组件 -> 框架 == 视图组件库 + 效果组件库 + 数据处理组件库 + 基类

编程一共分为两部分 - 逻辑部分 + 框架部分

框架部分研究(形式可变) - 基于库的组件服务如何使用,有何种特性,注意点是什么等等?
逻辑部分研究(固定) - 以框架为基础,作为粘合剂,组成最终产品的核心

其他部分 - 组织形式[设计模式/代码风格](为了程序员存在) - 效率[算法优化等等](为了提高效率,减少时间.空间复杂度) - 属于代码优化部分研究

基础架构随大流,项目作用是展示技术,组件库,技术文档,

- 暂定分类 :

视图组件(基于库) - 移植性低 - (基于tableview/collectionview 或 单独组件)
视图效果组件(基于库) - 移植性低 - (基于view 或 控制器)
数据组件(基于逻辑算法) - 高移植性 - (太他妈多了)

以上组件中视图以及效果组件的基本思路 - root向外扩展

基类

暂定范围
1.基类
2.视图组件
3.效果组件
4.数据处理组件

5.项目文件

之后随着归纳的需求越来越多,在总结一般需求
例如 : 对一个文件做标记 == 获取时间戳 + 序列化文件 + 拼接字符串

项目文件格式

1.成品界面展示 - 包括 : 控件使用 + 数据处理工具
2.
3.
4.
5.
6.



*/


关于其他


/*

 1.如果,切换启动页与主页的实质 是 切换根控制器的话,那么,对于app 实质上是 树状组织的多个相关页面罢了,所谓的切换,不过是换一棵树而已 - [最起码,页面之间的关系没有产品逻辑上表现的那么复杂]

*/











































































































